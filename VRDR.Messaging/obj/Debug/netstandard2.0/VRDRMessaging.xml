<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRDRMessaging</name>
    </assembly>
    <members>
        <member name="T:VRDR.AcknowledgementMessage">
            <summary>Class <c>AcknowledgementMessage</c> supports the acknowledgment of other messages.</summary>
        </member>
        <member name="F:VRDR.AcknowledgementMessage.MESSAGE_TYPE">
            <summary>
            The Event URI for AcknowledgementMessage
            </summary>
        </member>
        <member name="M:VRDR.AcknowledgementMessage.#ctor(VRDR.BaseMessage)">
            <summary>Constructor that creates an acknowledgement for the specified message.</summary>
            <param name="messageToAck">the message to create an acknowledgement for.</param>
        </member>
        <member name="M:VRDR.AcknowledgementMessage.#ctor(Hl7.Fhir.Model.Bundle)">
            <summary>
            Construct an AcknowledgementMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the AcknowledgementMessage</param>
            <returns></returns>
        </member>
        <member name="M:VRDR.AcknowledgementMessage.#ctor(System.String,System.String,System.String)">
            <summary>Constructor that creates an acknowledgement for the specified message.</summary>
            <param name="messageId">the id of the message to create an acknowledgement for.</param>
            <param name="destination">the endpoint identifier that the ack message will be sent to.</param>
            <param name="source">the endpoint identifier that the ack message will be sent from.</param>
        </member>
        <member name="P:VRDR.AcknowledgementMessage.AckedMessageId">
            <summary>The id of the message that is being acknowledged by this message</summary>
            <value>the message id.</value>
        </member>
        <member name="P:VRDR.AcknowledgementMessage.BlockCount">
            <summary>The number of records to void starting at the certificate number specified by the `CertNo` parameter</summary>
        </member>
        <member name="T:VRDR.BaseMessage">
            <summary>Class <c>BaseMessage</c> is the base class of all messages.</summary>
        </member>
        <member name="P:VRDR.BaseMessage.MessageBundle">
            <summary>Bundle that contains the message.</summary>
        </member>
        <member name="F:VRDR.BaseMessage.Record">
            <summary>
            A Parameters entry that contains business identifiers for all messages plus additional information for Coding messages.
            </summary>
        </member>
        <member name="F:VRDR.BaseMessage.Header">
            <summary>MessageHeader that contains the message header.</summary>
        </member>
        <member name="M:VRDR.BaseMessage.#ctor(Hl7.Fhir.Model.Bundle,System.Boolean,System.Boolean)">
            <summary>
            Construct a BaseMessage from a FHIR Bundle. This constructor will also validate that the Bundle
            represents a FHIR message of the correct type.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the BaseMessage</param>
            <param name="ignoreMissingEntries">if true, then missing bundle entries will not result in an exception</param>
            <param name="ignoreBundleType">if true, then an incorrect bundle type will not result in an exception</param>
        </member>
        <member name="M:VRDR.BaseMessage.findEntry``1(System.Boolean)">
            <summary>
            Find the first Entry within the message Bundle that contains a Resource of the specified type and return that resource.
            </summary>
            <param name="ignoreMissingEntries">if true, then missing entries will not result in an exception</param>
            <typeparam name="T">the class of the FHIR resource to return, must match with specified type:</typeparam>
            <returns>The first matching Bundle entry</returns>
        </member>
        <member name="M:VRDR.BaseMessage.#ctor(System.String)">
            <summary>Constructor that creates a new, empty message for the specified message type.</summary>
        </member>
        <member name="M:VRDR.BaseMessage.ExtractBusinessIdentifiers(VRDR.DeathRecord)">
            <summary>
            Extract the business identifiers for the message from the supplied death record.
            </summary>
            <param name="from">the death record to extract the identifiers from</param>
        </member>
        <member name="M:VRDR.BaseMessage.UpdateMessageBundleRecord">
            <summary>
            Update the record bundle in this message based on the MessageBundleRecord property (for whichever subclass we're instantiated as).
            Important if we're managing a death record that might have changed.
            </summary>
        </member>
        <member name="M:VRDR.BaseMessage.op_Explicit(VRDR.BaseMessage)~Hl7.Fhir.Model.Bundle">
            <summary>
            Allow explicit casting of a message into a bundle
            </summary>
            <param name="message">the death record to extract the bundle from</param>
        </member>
        <member name="M:VRDR.BaseMessage.ToXML(System.Boolean)">
            <summary>Helper method to return a XML string representation of this DeathRecordSubmissionMessage.</summary>
            <param name="prettyPrint">controls whether the returned string is formatted for human readability (true) or compact (false)</param>
            <returns>a string representation of this DeathRecordSubmissionMessage in XML format</returns>
        </member>
        <member name="M:VRDR.BaseMessage.ToXml(System.Boolean)">
            <summary>Helper method to return a XML string representation of this DeathRecordSubmissionMessage.</summary>
            <param name="prettyPrint">controls whether the returned string is formatted for human readability (true) or compact (false)</param>
            <returns>a string representation of this DeathRecordSubmissionMessage in XML format</returns>
        </member>
        <member name="M:VRDR.BaseMessage.ToJSON(System.Boolean)">
            <summary>Helper method to return a JSON string representation of this DeathRecordSubmissionMessage.</summary>
            <param name="prettyPrint">controls whether the returned string is formatted for human readability (true) or compact (false)</param>
            <returns>a string representation of this DeathRecordSubmissionMessage in JSON format</returns>
        </member>
        <member name="M:VRDR.BaseMessage.ToJson(System.Boolean)">
            <summary>Helper method to return a JSON string representation of this DeathRecordSubmissionMessage.</summary>
            <param name="prettyPrint">controls whether the returned string is formatted for human readability (true) or compact (false)</param>
            <returns>a string representation of this DeathRecordSubmissionMessage in JSON format</returns>
        </member>
        <member name="P:VRDR.BaseMessage.MessageBundleRecord">
            <summary>The record bundle that should go into the message bundle for this message</summary>
            <value>the MessageBundleRecord</value>
        </member>
        <member name="P:VRDR.BaseMessage.MessageTimestamp">
            <summary>Message timestamp</summary>
            <value>the message timestamp.</value>
        </member>
        <member name="P:VRDR.BaseMessage.MessageId">
            <summary>Message Id</summary>
            <value>the message id.</value>
        </member>
        <member name="P:VRDR.BaseMessage.MessageType">
            <summary>Message Type</summary>
            <value>the message type.</value>
        </member>
        <member name="P:VRDR.BaseMessage.MessageSource">
            <summary>Message Source</summary>
            <value>the message source.</value>
        </member>
        <member name="P:VRDR.BaseMessage.MessageDestination">
            <summary>Message Destination</summary>
            <value>the message destinations, in csv format to support multiple endpoints. Acts as a wrapper for MessageDestinations while still maintaining backwards compatibility.</value>
        </member>
        <member name="P:VRDR.BaseMessage.MessageDestinations">
            <summary>Message Destinations</summary>
            <value>the message destinations in list-based format.</value>
        </member>
        <member name="M:VRDR.BaseMessage.SetSingleStringValue(System.String,System.String)">
            <summary>Helper method to set a single string value on the Record portion of the Message</summary>
        </member>
        <member name="P:VRDR.BaseMessage.CertNo">
            <summary>Jurisdiction-assigned death certificate number</summary>
        </member>
        <member name="P:VRDR.BaseMessage.StateAuxiliaryId">
            <summary>Jurisdiction-assigned auxiliary identifier</summary>
        </member>
        <member name="P:VRDR.BaseMessage.DeathYear">
            <summary>The year in which the death occurred</summary>
        </member>
        <member name="P:VRDR.BaseMessage.JurisdictionId">
            <summary>Two character identifier of the jurisdiction in which the death occurred</summary>
        </member>
        <member name="P:VRDR.BaseMessage.NCHSIdentifier">
            <summary>NCHS identifier. Format is 4-digit year, two character jurisdiction id, six character/digit certificate id.</summary>
        </member>
        <member name="M:VRDR.BaseMessage.Parse``1(System.IO.StreamReader,System.Boolean)">
            <summary>
            Parse an XML or JSON serialization of a FHIR Bundle and construct the appropriate subclass of
            BaseMessage. The new object is checked to ensure it the same or a subtype of the type parameter.
            </summary>
            <typeparam name="T">the expected message type</typeparam>
            <param name="source">the XML or JSON serialization of a FHIR Bundle</param>
            <param name="permissive">if the parser should be permissive when parsing the given string</param>
            <returns>The deserialized message object</returns>
            <exception cref="T:VRDR.MessageParseException">Thrown when source does not represent the same or a subtype of the type parameter.</exception>
        </member>
        <member name="M:VRDR.BaseMessage.Parse``1(Hl7.Fhir.Model.Bundle)">
            <summary>
            Construct the appropriate subclass of BaseMessage based on a FHIR Bundle.
            The new object is checked to ensure it the same or a subtype of the type parameter.
            </summary>
            <typeparam name="T">the expected message type</typeparam>
            <param name="bundle">A FHIR Bundle</param>
            <returns>The message object of the appropriate message type</returns>
            <exception cref="T:VRDR.MessageParseException">Thrown when source does not represent the same or a subtype of the type parameter.</exception>
        </member>
        <member name="M:VRDR.BaseMessage.Parse``1(System.String,System.Boolean)">
            <summary>
            Parse an XML or JSON serialization of a FHIR Bundle and construct the appropriate subclass of
            BaseMessage. The new object is checked to ensure it the same or a subtype of the type parameter.
            </summary>
            <typeparam name="T">the expected message type</typeparam>
            <param name="source">the XML or JSON serialization of a FHIR Bundle</param>
            <param name="permissive">if the parser should be permissive when parsing the given string</param>
            <returns>the deserialized message object</returns>
            <exception cref="T:VRDR.MessageParseException">thrown when source does not represent the same or a subtype of the type parameter.</exception>
        </member>
        <member name="M:VRDR.BaseMessage.Parse(System.String,System.Boolean)">
            <summary>
            Parse an XML or JSON serialization of a FHIR Bundle and construct the appropriate subclass of
            BaseMessage. Clients can use the typeof operator to determine the type of message object returned.
            </summary>
            <param name="source">the XML or JSON serialization of a FHIR Bundle</param>
            <param name="permissive">if the parser should be permissive when parsing the given string</param>
            <returns>The deserialized message object</returns>
        </member>
        <member name="M:VRDR.BaseMessage.ParseGenericMessage(System.String,System.Boolean)">
            <summary>
            Parse an XML or JSON serialization of a FHIR Bundle and construct a generic BaseMessage.
            </summary>
            <param name="source">the XML or JSON serialization of a FHIR Bundle</param>
            <param name="permissive">if the parser should be permissive when parsing the given string</param>
            <returns>The deserialized base message object</returns>
        </member>
        <member name="M:VRDR.BaseMessage.ParseGenericBundle(System.String,System.Boolean)">
            <summary>
            Parse an XML or JSON serialization of a FHIR Bundle.
            </summary>
            <param name="source">the XML or JSON serialization of a FHIR Bundle</param>
            <param name="permissive">if the parser should be permissive when parsing the given string</param>
            <returns>The deserialized bundle object</returns>
        </member>
        <member name="M:VRDR.BaseMessage.Parse(Hl7.Fhir.Model.Bundle)">
            <summary>
            Construct the appropriate subclass of BaseMessage based on a FHIR Bundle.
            Clients can use the typeof operator to determine the type of message object returned.
            </summary>
            <param name="bundle">A FHIR Bundle</param>
            <returns>The message object of the appropriate message type</returns>
        </member>
        <member name="M:VRDR.BaseMessage.Parse(System.IO.StreamReader,System.Boolean)">
            <summary>
            Parse an XML or JSON serialization of a FHIR Bundle and construct the appropriate subclass of
            BaseMessage. Clients can use the typeof operator to determine the type of message object returned.
            </summary>
            <param name="source">the XML or JSON serialization of a FHIR Bundle</param>
            <param name="permissive">if the parser should be permissive when parsing the given string</param>
            <returns>The deserialized message object</returns>
        </member>
        <member name="M:VRDR.BaseMessage.GetDeathRecordFromMessage(VRDR.BaseMessage)">
            <summary>
            Convert message to message type and extract the death record
            </summary>
            <param name="message">base message</param>
            <returns>The death record inside the base message</returns>
        </member>
        <member name="T:VRDR.MessageParseException">
            <summary>
            An exception that may be thrown during message parsing
            </summary>
        </member>
        <member name="M:VRDR.MessageParseException.#ctor(System.String,VRDR.BaseMessage)">
            <summary>
            Construct a new instance.
            </summary>
            <param name="errorMessage">A text error message describing the problem</param>
            <param name="sourceMessage">The message that caused the problem</param>
        </member>
        <member name="M:VRDR.MessageParseException.CreateExtractionErrorMessage">
            <summary>
            Build an ExtractionErrorMessage that conveys the issues reported in this exception.
            </summary>
        </member>
        <member name="T:VRDR.CauseOfDeathCodingMessage">
            <summary>
            A <c>CauseOfDeathCodingMessage</c> that conveys the coded cause of death information of a decedent.
            </summary>
        </member>
        <member name="F:VRDR.CauseOfDeathCodingMessage.MESSAGE_TYPE">
            <summary>
            The event URI for CauseOfDeathCodingMessage.
            </summary>
        </member>
        <member name="F:VRDR.CauseOfDeathCodingMessage.deathRecord">
            <summary>Bundle that contains the message payload.</summary>
        </member>
        <member name="M:VRDR.CauseOfDeathCodingMessage.#ctor(VRDR.DeathRecord)">
            <summary>
            Construct a CauseOfDeathCodingMessage from a record containing cause of death coded content.
            </summary>
            <param name="record">a record containing cause of death coded content</param>
            <returns></returns>
        </member>
        <member name="M:VRDR.CauseOfDeathCodingMessage.#ctor(Hl7.Fhir.Model.Bundle,VRDR.BaseMessage)">
            <summary>
            Construct a CauseOfDeathCodingMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the CauseOfDeathCodingMessage</param>
            <param name="baseMessage">the BaseMessage instance that was constructed during parsing that can be used in a MessageParseException if needed</param>
            <returns></returns>
        </member>
        <member name="M:VRDR.CauseOfDeathCodingMessage.#ctor(VRDR.BaseMessage)">
            <summary>Constructor that creates an CauseOfDeathCodingMessage for the specified submitted death record message.</summary>
            <param name="messageToCode">the message to create coding response for.</param>
        </member>
        <member name="M:VRDR.CauseOfDeathCodingMessage.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Constructor that creates a CauseOfDeathCoding message for the specified message.</summary>
            <param name="messageId">the id of the message to code.</param>
            <param name="destination">the endpoint identifier that the ack message will be sent to.</param>
            <param name="status">the status being sent, from http://build.fhir.org/ig/nightingaleproject/vital_records_fhir_messaging_ig/branches/main/ValueSet-VRM-Status-vs.html</param>
            <param name="source">the endpoint identifier that the ack message will be sent from.</param>
        </member>
        <member name="P:VRDR.CauseOfDeathCodingMessage.DeathRecord">
            <summary>The DeathRecord containing cause of death coded content conveyed by this message</summary>
            <value>the DeathRecord</value>
        </member>
        <member name="P:VRDR.CauseOfDeathCodingMessage.MessageBundleRecord">
            <summary>The record bundle that should go into the message bundle for this message</summary>
            <value>the MessageBundleRecord</value>
        </member>
        <member name="P:VRDR.CauseOfDeathCodingMessage.CodedMessageId">
            <summary>The id of the death record submission/update message that was coded to produce the content of this message</summary>
            <value>the message id.</value>
        </member>
        <member name="T:VRDR.CauseOfDeathCodingUpdateMessage">
            <summary>Class <c>CauseOfDeathCodingUpdateMessage</c> conveys an updated coded cause of death of a decedent.</summary>
        </member>
        <member name="F:VRDR.CauseOfDeathCodingUpdateMessage.MESSAGE_TYPE">
            <summary>
            The event URI for CauseOfDeathCodingUpdateMessage.
            </summary>
        </member>
        <member name="M:VRDR.CauseOfDeathCodingUpdateMessage.#ctor(VRDR.DeathRecord)">
            <summary>
            Construct a CauseOfDeathCodingUpdateMessage from a record that containing cause of death coded content.
            </summary>
            <param name="record">a record that containing cause of death coded content for initializing the CauseOfDeathCodingUpdateMessage</param>
            <returns></returns>
        </member>
        <member name="M:VRDR.CauseOfDeathCodingUpdateMessage.#ctor(Hl7.Fhir.Model.Bundle,VRDR.BaseMessage)">
            <summary>
            Construct a CauseOfDeathCodingUpdateMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the CauseOfDeathCodingUpdateMessage</param>
            <param name="baseMessage">the BaseMessage instance that was constructed during parsing that can be used in a MessageParseException if needed</param>
            <returns></returns>
        </member>
        <member name="T:VRDR.DeathRecordAliasMessage">
            <summary>Class <c>DeathRecordAliasMessage</c> indicates that a previously submitted DeathRecordSubmissionMessage has alias information.</summary>
        </member>
        <member name="F:VRDR.DeathRecordAliasMessage.MESSAGE_TYPE">
            <summary>
            The Event URI for DeathRecordAliasMessage
            </summary>
        </member>
        <member name="M:VRDR.DeathRecordAliasMessage.#ctor">
            <summary>Default constructor that creates a new, empty DeathRecordAliasMessage.</summary>
        </member>
        <member name="M:VRDR.DeathRecordAliasMessage.#ctor(Hl7.Fhir.Model.Bundle)">
            <summary>
            Construct a DeathRecordAliasMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the DeathRecordAliasMessage</param>
            <returns></returns>
        </member>
        <member name="M:VRDR.DeathRecordAliasMessage.#ctor(VRDR.DeathRecord)">
            <summary>Constructor that takes a VRDR.DeathRecord and creates a message to submit an alias for that record.</summary>
            <param name="record">the VRDR.DeathRecord to create a DeathRecordAliasMessage for.</param>
        </member>
        <member name="P:VRDR.DeathRecordAliasMessage.AliasDecedentFirstName">
            <summary>Alias for the decedent's first name</summary>
        </member>
        <member name="P:VRDR.DeathRecordAliasMessage.AliasDecedentLastName">
            <summary>Alias for the decedent's last name</summary>
        </member>
        <member name="P:VRDR.DeathRecordAliasMessage.AliasDecedentMiddleName">
            <summary>Alias for the decedent's middle name</summary>
        </member>
        <member name="P:VRDR.DeathRecordAliasMessage.AliasDecedentNameSuffix">
            <summary>Alias for the decedent's name suffix</summary>
        </member>
        <member name="P:VRDR.DeathRecordAliasMessage.AliasFatherSurname">
            <summary>Alias for the decedent's father's surname</summary>
        </member>
        <member name="P:VRDR.DeathRecordAliasMessage.AliasSocialSecurityNumber">
            <summary>Alias for the decedent's social security number</summary>
        </member>
        <member name="T:VRDR.DeathRecordSubmissionMessage">
            <summary>Class <c>DeathRecordSubmission</c> supports the submission of VRDR records.</summary>
        </member>
        <member name="F:VRDR.DeathRecordSubmissionMessage.MESSAGE_TYPE">
            <summary>
            The event URI for DeathRecordSubmission.
            </summary>
        </member>
        <member name="F:VRDR.DeathRecordSubmissionMessage.deathRecord">
            <summary>Bundle that contains the message payload.</summary>
        </member>
        <member name="M:VRDR.DeathRecordSubmissionMessage.#ctor">
            <summary>Default constructor that creates a new, empty DeathRecordSubmission.</summary>
        </member>
        <member name="M:VRDR.DeathRecordSubmissionMessage.#ctor(VRDR.DeathRecord)">
            <summary>Constructor that takes a VRDR.DeathRecord and wraps it in a DeathRecordSubmission.</summary>
            <param name="record">the VRDR.DeathRecord to create a DeathRecordSubmission for.</param>
        </member>
        <member name="M:VRDR.DeathRecordSubmissionMessage.#ctor(Hl7.Fhir.Model.Bundle,VRDR.BaseMessage)">
            <summary>
            Construct a DeathRecordSubmission from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the DeathRecordSubmission</param>
            <param name="baseMessage">the BaseMessage instance that was constructed during parsing that can be used in a MessageParseException if needed</param>
        </member>
        <member name="P:VRDR.DeathRecordSubmissionMessage.DeathRecord">
            <summary>The DeathRecord conveyed by this message</summary>
            <value>the DeathRecord</value>
        </member>
        <member name="P:VRDR.DeathRecordSubmissionMessage.MessageBundleRecord">
            <summary>The record bundle that should go into the message bundle for this message</summary>
            <value>the MessageBundleRecord</value>
        </member>
        <member name="T:VRDR.DeathRecordUpdateMessage">
            <summary>Class <c>DeathRecordUpdateMessage</c> supports the update of VRDR records.</summary>
        </member>
        <member name="F:VRDR.DeathRecordUpdateMessage.MESSAGE_TYPE">
            <summary>
            The event URI for DeathRecordUpdateMessage.
            </summary>
        </member>
        <member name="M:VRDR.DeathRecordUpdateMessage.#ctor">
            <summary>Default constructor that creates a new, empty DeathRecordUpdateMessage.</summary>
        </member>
        <member name="M:VRDR.DeathRecordUpdateMessage.#ctor(VRDR.DeathRecord)">
            <summary>Constructor that takes a VRDR.DeathRecord and wraps it in a DeathRecordUpdateMessage.</summary>
            <param name="record">the VRDR.DeathRecord to create a DeathRecordUpdateMessage for.</param>
        </member>
        <member name="M:VRDR.DeathRecordUpdateMessage.#ctor(Hl7.Fhir.Model.Bundle,VRDR.BaseMessage)">
            <summary>
            Construct a DeathRecordUpdateMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the DeathRecordUpdateMessage</param>
            <param name="baseMessage">the BaseMessage instance that was constructed during parsing that can be used in a MessageParseException if needed</param>
        </member>
        <member name="T:VRDR.DeathRecordVoidMessage">
            <summary>Class <c>DeathRecordVoidMessage</c> indicates that a previously submitted DeathRecordSubmissionMessage should be voided.</summary>
        </member>
        <member name="F:VRDR.DeathRecordVoidMessage.MESSAGE_TYPE">
            <summary>
            The Event URI for DeathRecordVoidMessage
            </summary>
        </member>
        <member name="M:VRDR.DeathRecordVoidMessage.#ctor">
            <summary>Default constructor that creates a new, empty DeathRecordVoidMessage.</summary>
        </member>
        <member name="M:VRDR.DeathRecordVoidMessage.#ctor(Hl7.Fhir.Model.Bundle)">
            <summary>
            Construct a DeathRecordVoidMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the DeathRecordVoidMessage</param>
            <returns></returns>
        </member>
        <member name="M:VRDR.DeathRecordVoidMessage.#ctor(VRDR.DeathRecord)">
            <summary>Constructor that takes a VRDR.DeathRecord and creates a message to void that record.</summary>
            <param name="record">the VRDR.DeathRecord to create a DeathRecordVoidMessage for.</param>
        </member>
        <member name="P:VRDR.DeathRecordVoidMessage.BlockCount">
            <summary>The number of records to void starting at the certificate number specified by the `CertNo` parameter</summary>
        </member>
        <member name="T:VRDR.DemographicsCodingMessage">
            <summary>
            A <c>DemographicsCodingMessage</c> that conveys the coded demographics information of a decedent.
            </summary>
        </member>
        <member name="F:VRDR.DemographicsCodingMessage.MESSAGE_TYPE">
            <summary>
            The event URI for DemographicsCodingMessage.
            </summary>
        </member>
        <member name="F:VRDR.DemographicsCodingMessage.deathRecord">
            <summary>Bundle that contains the message payload.</summary>
        </member>
        <member name="M:VRDR.DemographicsCodingMessage.#ctor(VRDR.DeathRecord)">
            <summary>
            Construct a DemographicsCodingMessage from a record containing demographics coded content.
            </summary>
            <param name="record">a record containing demographics coded content for initializing the DemographicsCodingMessage</param>
            <returns></returns>
        </member>
        <member name="M:VRDR.DemographicsCodingMessage.#ctor(Hl7.Fhir.Model.Bundle,VRDR.BaseMessage)">
            <summary>
            Construct a DemographicsCodingMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the DemographicsCodingMessage</param>
            <param name="baseMessage">the BaseMessage instance that was constructed during parsing that can be used in a MessageParseException if needed</param>
            <returns></returns>
        </member>
        <member name="M:VRDR.DemographicsCodingMessage.#ctor(VRDR.BaseMessage)">
            <summary>Constructor that creates an DemographicsCodingMessage for the specified submitted death record message.</summary>
            <param name="messageToCode">the message to create coding response for.</param>
        </member>
        <member name="M:VRDR.DemographicsCodingMessage.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Constructor that creates a DemographicsCodingMessage for the specified message.</summary>
            <param name="messageId">the id of the message to code.</param>
            <param name="destination">the endpoint identifier that the ack message will be sent to.</param>
            <param name="status">the status being sent, from http://build.fhir.org/ig/nightingaleproject/vital_records_fhir_messaging_ig/branches/main/ValueSet-VRM-Status-vs.html</param>
            <param name="source">the endpoint identifier that the ack message will be sent from.</param>
        </member>
        <member name="P:VRDR.DemographicsCodingMessage.DeathRecord">
            <summary>The DeathRecord conveyed by this message</summary>
            <value>the DeathRecord</value>
        </member>
        <member name="P:VRDR.DemographicsCodingMessage.MessageBundleRecord">
            <summary>The record bundle that should go into the message bundle for this message</summary>
            <value>the MessageBundleRecord</value>
        </member>
        <member name="P:VRDR.DemographicsCodingMessage.CodedMessageId">
            <summary>The id of the death record submission/update message that was coded to produce the content of this message</summary>
            <value>the message id.</value>
        </member>
        <member name="T:VRDR.DemographicsCodingUpdateMessage">
            <summary>Class <c>DemographicsCodingUpdateMessage</c> conveys an updated coded demographics of a decedent.</summary>
        </member>
        <member name="F:VRDR.DemographicsCodingUpdateMessage.MESSAGE_TYPE">
            <summary>
            The event URI for DemographicsCodingUpdateMessage.
            </summary>
        </member>
        <member name="M:VRDR.DemographicsCodingUpdateMessage.#ctor(VRDR.DeathRecord)">
            <summary>
            Construct a DemographicsCodingUpdateMessage from a record containing demographics coded content.
            </summary>
            <param name="record">a record containing demographics coded content for initializing the DemographicsCodingUpdateMessage</param>
            <returns></returns>
        </member>
        <member name="M:VRDR.DemographicsCodingUpdateMessage.#ctor(Hl7.Fhir.Model.Bundle,VRDR.BaseMessage)">
            <summary>
            Construct a DemographicsCodingUpdateMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the DemographicsCodingUpdateMessage</param>
            <param name="baseMessage">the BaseMessage instance that was constructed during parsing that can be used in a MessageParseException if needed</param>
            <returns></returns>
        </member>
        <member name="T:VRDR.ExtractionErrorMessage">
            <summary>Class <c>ExtractionErrorMessage</c> is used to communicate that initial processing of a DeathRecordSubmissionMessage failed.</summary>
        </member>
        <member name="F:VRDR.ExtractionErrorMessage.MESSAGE_TYPE">
            <summary>
            The Event URI for ExtractionErrorMessage
            </summary>
        </member>
        <member name="M:VRDR.ExtractionErrorMessage.#ctor(VRDR.BaseMessage)">
            <summary>Constructor that creates an extraction error for the specified message.</summary>
            <param name="sourceMessage">the message that could not be processed.</param>
        </member>
        <member name="M:VRDR.ExtractionErrorMessage.#ctor(Hl7.Fhir.Model.Bundle,VRDR.BaseMessage)">
            <summary>
            Construct an ExtractionErrorMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the ExtractionErrorMessage</param>
            <param name="baseMessage">the BaseMessage instance that was constructed during parsing that can be used in a MessageParseException if needed</param>
        </member>
        <member name="M:VRDR.ExtractionErrorMessage.#ctor(System.String,System.String,System.String)">
            <summary>Constructor that creates an extraction error message for the specified message.</summary>
            <param name="messageId">the id of the message to create an extraction error for.</param>
            <param name="destination">the endpoint identifier that the extraction error message will be sent to.</param>
            <param name="source">the endpoint identifier that the extraction error message will be sent from.</param>
        </member>
        <member name="P:VRDR.ExtractionErrorMessage.FailedMessageId">
            <summary>The id of the message that could not be extracted</summary>
            <value>the message id.</value>
        </member>
        <member name="P:VRDR.ExtractionErrorMessage.Issues">
            <summary>
            List of issues found when attenpting to extract the message
            </summary>
            <value>list of issues</value>
        </member>
        <member name="T:VRDR.Issue">
            <summary>
            Class representing an issue detected during message processing.
            </summary>
        </member>
        <member name="F:VRDR.Issue.Severity">
            <summary>
            Severity of the issue
            </summary>
        </member>
        <member name="F:VRDR.Issue.Type">
            <summary>
            Type of the issue
            </summary>
        </member>
        <member name="F:VRDR.Issue.Description">
            <summary>
            Human readable description of the issue
            </summary>
        </member>
        <member name="M:VRDR.Issue.#ctor(System.Nullable{Hl7.Fhir.Model.OperationOutcome.IssueSeverity},System.Nullable{Hl7.Fhir.Model.OperationOutcome.IssueType},System.String)">
            <summary>
            Construct a new Issue
            </summary>
            <param name="severity">the severity of the issue</param>
            <param name="type">the type of issue</param>
            <param name="description">a human readable description of the issue</param>
        </member>
        <member name="T:VRDR.StatusMessage">
            <summary>Class <c>StatusMessage</c> provides a status update to a jurisdiction about a previously submitted message.</summary>
        </member>
        <member name="F:VRDR.StatusMessage.MESSAGE_TYPE">
            <summary>
            The Event URI for StatusMessage
            </summary>
        </member>
        <member name="M:VRDR.StatusMessage.#ctor">
            <summary>Default constructor that creates a new, empty StatusMessage.</summary>
        </member>
        <member name="M:VRDR.StatusMessage.#ctor(Hl7.Fhir.Model.Bundle)">
            <summary>
            Construct a StatusMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the StatusMessage</param>
            <returns></returns>
        </member>
        <member name="M:VRDR.StatusMessage.#ctor(VRDR.BaseMessage,System.String)">
            <summary>Constructor that creates a status message for the specified message.</summary>
            <param name="messageToStatus">the message to create a status for.</param>
            <param name="status"> status value </param>
        </member>
        <member name="M:VRDR.StatusMessage.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Constructor that creates a status message for the specified message.</summary>
            <param name="messageId">the id of the message to create status message for.</param>
            <param name="destination">the endpoint identifier that the ack message will be sent to.</param>
            <param name="status">the status being sent, from http://build.fhir.org/ig/nightingaleproject/vital_records_fhir_messaging_ig/branches/main/ValueSet-VRM-Status-vs.html</param>
            <param name="source">the endpoint identifier that the ack message will be sent from.</param>
        </member>
        <member name="P:VRDR.StatusMessage.StatusedMessageId">
            <summary>The id of the message whose status is being reported by this message</summary>
            <value>the message id.</value>
        </member>
        <member name="P:VRDR.StatusMessage.Status">
            <summary>ProcessingStatus</summary>
        </member>
    </members>
</doc>
